{"pages":[],"posts":[{"title":"SVD奇异值分解及应用","text":"特点 优点：简化数据，去除噪声，提高算法结果 缺点：数据的转换可能难以解释 适用于数值型数据 原理$M_{m\\times n} = U_{m\\times n}D_{n\\times n}V_{n\\times n}^T\\approx U_{m\\times k}D_{k\\times k}V_{k\\times n}^T$ 对于矩阵$U$可表示为： $U = (u_1,u_2,…,u_n)$ 对于$V$： $V =(v_1,v_2,…,v_n)$ 则有： $M=d_{1} u_{1} v_{1}^{T}+d_{2} u_{2} v_{2}^{T}+\\cdots+d_{n} u_{n} v_{n}^{T}=\\sum_{i=1}^{n} d_{i} u_{i} v_{i}^{T}=\\sum_{i=1}^{n} A_{i}$ $M_n \\approx M_{k}=\\sum_{i=1}^{k} A_{i}$ 应用图像压缩存储一张 1000×622 大小的图片，实际上就是存储一个 1000×622 的矩阵，共 622000 个元素。这个矩阵用 SVD 可以分解为 622 个矩阵之和，如果我们选取其中的前 100 个之和作为对图像数据的近似，那么只需要存储 100 个奇异值 $d_i$，100 个 $u_i$ 向量和 100 个 $v_i$ 向量，共100×(1+1000+622)=162300 个 元素，大约只有原始的 26% 大小。","link":"/2019/07/27/SVD奇异值分解/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/07/27/hello-world/"},{"title":"mcm离散型题目及思路记录","text":"简单记录了题目和思路。 2017B ”拍照赚钱“的任务定价问题描述在拍照赚钱APP中，用户可以领取拍照任务，完成任务后可以获得酬金，不同的任务又不同的定价。 附件一给了任务的位置（经纬度），定价，完成情况，需要分析任务未完成的原因。 制定新的定价方案，并和原方案比较。 考虑任务联合打包发布规则下的定价模型，并分析对最终任务完成情况的影响。 对附件三种的新项目给出定价方案。 思路问题一：从定性和定量角度分析，先使用cftool工具箱绘制定价和经纬度坐标的三维拟合图，观察结果定性得出结论。然后利用kmeans聚类，将地图划分为网格区域，每个网格内定义四个指标，然后利用灰色关联矩阵定量分析定义的指标和定价的相关程度，然后通过对比未完成任务和已完成任务的相关度矩阵得出最显著的影响因素。 问题二：将定价方案看作优化问题，总成本最小化，完成率最大化：$\\left\\{ \\begin{array} { l } { \\min \\sum _ { i = 1 } ^ { 835 } p _ { i } } \\\\ { \\max \\sum _ { i = 1 } ^ { 835 } C _ { i } } \\end{array} \\right.$，定义了吸引度矩阵： 定义阈值，$w _ { i } = \\left\\{ \\begin{array} { l } { \\min \\left\\{ w _ { i j } \\right\\} , C _ { i } = 1 } \\\\ { \\max \\left\\{ w _ { i j } \\right\\} , C _ { i } = 0 } \\end{array} \\right.$当第i 个任务被完成时，其阈值至少低于其对一个会员的吸引度；当第i 个任务未被完成时，其阈值不低于任何其对一个会员的吸引度。 问题三：修改优化模型，通过聚类分析打包任务，修改吸引力矩阵，重新进行搜索。 问题四：聚类分析将任务打包，然后用第三问的任务数据和最优定价作为训练数据训练神经网络，再带入附件三的数据得到定价。 2016B 小区开放对道路通行的影响问题描述 建立评价指标体系，评价小区开放对周边道路通行的影响。 建立车辆通行的数学模型，用以研究小区开放对周边道路通行的影响。 小区开放产生的效果，可能会与小区结构及周边道路结构、车流量有关。请选取或构建不同类型的小区，应用你们建立的模型，定量比较各类型小区开放前后对道路通行的影响。 思路问题一:找指标，先找了多个指标，利用聚类分析把影响因素进行归类，然后利用层次分析法构建评价体系。 问题二：利用元胞自动机模拟道路情况，车辆变量更新规则有NS模型， 然后考虑道路通行能力，安全性，便捷度，建立模糊综合评价模型。通行能力利用层次分析法评定，安全性自己定义公式，便携度求最短路径。 问题三：针对不同小区，确定问题二模型中的参数，相当于模型求解。 2015B “互联网+”时代的出租车资源配置问题描述请你们搜集相关数据，建立数学模型研究如下问题： (1) 试建立合理的指标，并分析不同时空出租车资源的“供求匹配”程度。 (2) 分析各公司的出租车补贴方案是否对“缓解打车难”有帮助？ (3) 如果要创建一个新的打车软件服务平台，你们将设计什么样的补贴方案，并论证其合理性。 思路问题一：还是找指标，里程利用率，供求比率 里程利用率 K =载客里程（公里）/行驶里程（公里）*100% 然后确定这两个指标在供求平衡下的理想值（不是1） 然后再对不同时段（高峰，常规），不同空间（市区，郊区）进行模拟。 问题二： 软件使用比例计算： 意愿半径计算：即司机为接单愿意行驶的最大距离。也是用函数拟合的思路，定义一个函数形式，带入已知求出参数。 不同的时间段有不同的补贴金额，缓解率也随时间变化，可以绘制变化曲线。 第三问：开放问题，示例论文中采用了分区域动态实时补贴的方法，自己值定了一些规则，根据规则列出方程，解方程得到的结果。 也可以采用最优化问题的求解思路，站在平台的角度，补贴最少，效益最高。 2014B 创意平板折叠桌做过，不写了，模拟动态变化的过程就是推导桌子角度变量间的一些关系式，加工参数确定看成最优化问题。 2013B 碎纸片拼接复原做过，不写了，有点难。 2012B 太阳能小屋的设计问题描述：问题1：请根据山西省大同市的气象数据，仅考虑贴附安装方式，选定光伏电池组件，对小屋（见附件2）的部分外表面进行铺设，并根据电池组件分组数量和容量，选配相应的逆变器的容量和数量。 问题2：电池板的朝向与倾角均会影响到光伏电池的工作效率，请选择架空方式安装光伏电池，重新考虑问题1。 问题3：根据附件7给出的小屋建筑要求，请为大同市重新设计一个小屋，要求画出小屋的外形图，并对所设计小屋的外表面优化铺设光伏电池，给出铺设及分组连接方式，选配逆变器，计算相应结果。 思路第一问：电池板有三种串并联方式，不同的串并联方式还可以连接不同的逆变器，针对每种串并联方式，设置最优化目标: 全年功率最大化：$\\max W_{jmA}$，逆变器和电池总价最小化：$\\min p_{jmA}$，j表示墙免编号，m表示逆变器型号，A表示不同的电池连接方式。 针对该多目标优化问题，分别先做单目标规划下的最优值，求解出$W’_{jmA}$和$p’_{jmA}$ 然后再构造单目标规划： $f = (W_{jmA}-W’_{jmA})^2+(p_{jmA}-p’_{jmA})^2$ 根据此形式构造出优先级函数，得到不同型号逆变器的最佳组合方式定义优先级： $f’ = (\\frac{W_{jmA}-W_{max}}{W_{max}})^2+(\\frac{p_{jmA}-p_{min}}{p_{min}})^2 $ 采用贪心的方法根据优先级进行安装。 第二问：最优化，找到全年辐射强度最大的角度。 然后需要研究电池板的投影情况，阴影情况限制了电池的铺设。 第三问：根据房屋建设的标准制定约束，以全年接受光强之和为优化目标。 2012A 葡萄酒评价问题描述 分析附件1中两组评酒员的评价结果有无显著性差异，哪一组结果更可信？ 根据酿酒葡萄的理化指标和葡萄酒的质量对这些酿酒葡萄进行分级。 分析酿酒葡萄与葡萄酒的理化指标之间的联系。 分析酿酒葡萄和葡萄酒的理化指标对葡萄酒质量的影响，并论证能否用葡萄和葡萄酒的理化指标来评价葡萄酒的质量？ 思路","link":"/2019/08/15/mcm离散型题目记录/"},{"title":"matlab模拟退火工具箱satools","text":"​ 记录了模拟退火的原理和matlab第三方工具箱satools的使用。 算法原理 SATOOLS使用模拟退火主函数anneal调用格式：1234567891011function [W,Ew,Wbsf,Ebsf,Tt,Et,Etarget,ert,Kt,Ebsft,Eh,M,rho,Ebin] = anneal( ... verbose, ... newstate, X, ... cost, moveclass, ... walkers, ... acceptrule, q, ... schedule, P, ... equilibrate, C, maxsteps, ... Tinit, r, ... Tfinal, f, maxtemps, ... v, bins, e) 参数说明 verbose：flag变量，为1时打印状态变量 newstate：用户自定义函数,产生初始解 X：问题的domain(解空间?)，常量 cost：用户自定义函数，最优化的目标函数 moveclass：用户自定义函数，用来产生新解 walkers：正整数 acceptrule：用户自定义函数，接受规则，工具箱也提供了几个，经常用metropolis准则 q：acceptrule所需要的参数 schedule：温度更新函数，可自定义 P：schedule所需参数 equilibrate：(平衡)可传入函数句柄或其他。当传入函数时，表示温度是否改变的判断函数 C：equilibrate所需参数 maxsteps：同一温度下的迭代最大次数 Tinit：初始化函数，可自定义可使用工具箱提供函数。 r：Tinit所需参数 Tfinal：终止温度，可以是自定义函数，工具箱也提供，或者是数（-INF ok） f：参数 maxtemps：最大温度迭代次数 v：温度变化的快慢$[0,1]$ bins： e： 自定义函数编写 newstate产生初始解， 12345678910111213function W = PROBLEMNAME_new(X)% W = PROBLEMNAME_new(X)% See http://www.frostconcepts.com/software for information on SA Tools.%% W = PROBLEMNAME_new(X) ;%% X = behaviorally constant application data%% W = specific data about current state%% Instantiates a new state.%W = [] ; % a typical application will put state specific data here cost最优化目标 12345678910function Ew = PROBLEMNAME_cost(X,W)% Ew = PROBLEMNAME_cost(X,W)%% X = behaviorally constant application data%% W = specific data about current state%% Ew = energy corresponding to W%Ew = rand ; % a typical application will use information from W and X to compute Ew. moveclass产生新解 123456789function W = PROBLEMNAME_perturb(X,W,Ea,T)% W = PROBLEMNAME_perturb(X,W,Ea,T)%% X = behaviorally constant application data%% W = (on input) current state, (on output) next state.%% Ea = current average energy% T = current temperature 产生解空间 123456function X = PROBLEMNAME_init()% X = PROBLEMNAME_init()%% X = behaviorally constant application data%X = [] ; % a typical application will put problem domain data here","link":"/2019/08/11/matlab模拟退火工具箱satools/"},{"title":"markdown常用公式符号","text":"123456789101112131415161718192021222324252627282930311. 上标$$x^2$$2. 下标$$x_i$$3. 累加$$\\sum$$4. 分数$$\\frac{1}{3}$$5. 开方$$\\sqrt{2}$$6. 矢量$$\\vec{x}$$7. 积分$$\\int$$ $$\\int_0^1x^2$$8. 常见希腊字母 $\\alpha$,$\\beta$,$\\gamma$,$\\delta$,$\\theta$9. 叉乘$$\\times$$10. 点乘$$\\cdot$$11. 除$$\\div$$12. 矩阵$$\\begin{matrix}1 &amp; 2 &amp; 3 \\\\4 &amp; 5 &amp; 6 \\\\7 &amp; 8 &amp; 9 \\end{matrix} \\tag{1}$$13. 带括号的矩阵$$\\left[\\begin{matrix}1 &amp; 2 &amp; 3 \\\\4 &amp; 5 &amp; 6 \\\\7 &amp; 8 &amp; 9 \\end{matrix} \\right]\\tag{2}$$14. 约等于$\\approx$ 上标$$x^2$$ 下标$$x_i$$ 累加$$\\sum$$ 分数$$\\frac{1}{3}$$ 开方$$\\sqrt{2}$$ 矢量$$\\vec{x}$$ 积分$$\\int$$ $$\\int_0^1x^2$$ 常见希腊字母$\\alpha$,$\\beta$,$\\gamma$,$\\delta$,$\\theta$ 叉乘$$\\times$$ 点乘$$\\cdot$$ 除$$\\div$$ 矩阵$$\\begin{matrix}1 &amp; 2 &amp; 3 \\4 &amp; 5 &amp; 6 \\7 &amp; 8 &amp; 9\\end{matrix} \\tag{1}$$ 带括号的矩阵 $$\\left[\\begin{matrix}1 &amp; 2 &amp; 3 \\4 &amp; 5 &amp; 6 \\7 &amp; 8 &amp; 9\\end{matrix} \\right]\\tag{2}$$ 约等于$\\approx$","link":"/2019/07/27/markdown常用公式符号/"},{"title":"hexo图片插入","text":"配置Typora文件 $\\longrightarrow$ 偏好设置 安装hexo-asset-image安装0.0.1版，1.0.0会出现.com问题 打开博客根目录下的package.json文件，如下修改： 1&quot;hexo-asset-image&quot;: &quot;0.0.1&quot;, 然后在博客根目录下 1npm install 使用以下格式在md文件中即可插入图片： 1![](xxxx/example.jpg) 参考资料：https://alreadyright.github.io/2019/06/16/aboutHexo/","link":"/2019/07/27/hexo图片插入/"},{"title":"公式无法渲染问题","text":"错误情况部分公式无法渲染，显示为源码 环境 解决修改marked\\lib\\marked.js以下语句： 12escape: /^\\\\([!&quot;#$%&amp;&apos;()*+,\\-./:;&lt;=&gt;?@\\[\\]^_`|~])/,em:/^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,","link":"/2019/08/10/公式无法渲染问题/"},{"title":"决策论","text":"决策论中的一些基本概念。 基本内容 不确定型决策的几种准则：悲观准则、乐观准则、最小后悔准则、等可能性准则与乐观系数法 风险型决策的最大期望收益值法（EMV）、贝叶斯决策准则及信息价值（EVPI）、决策树法 不确定型决策决策基本要素 状态空间：$S=\\left\\{S_{1}, S_{2}, S_{3} \\cdots, S_{m}\\right\\}=\\left\\{S_{i}\\right\\} \\quad i=1, \\cdots m$ 策略空间：$A=\\left\\{A_{1}, A_{2}, \\cdots, A_{n}\\right\\}=\\left\\{A_{j}\\right\\} \\quad j=1, \\cdots, n$ 损益函数：$U_{i j}=u\\left(S_{i}, A_{j}\\right) \\quad i=1,2, \\cdots m ; j=1,2, \\cdots n$ 所以决策系统可以表示为三个主要素的函数： $$D=D(S, U, V)$$ 不确定决策例子公司决策生产那种新商品 悲观主义准则（小中取大） 乐观主义准则（大中取大） 最小后悔值准则：编制机会损失表$r_{i j }=\\left\\{\\max _{j}\\left\\{a_{i j }\\right\\}-a_{i j}\\right\\}$,找出每个方案的最大机会损失$Z_{i}=\\max _{i}\\left\\{r_{i j}\\right\\}$,选择最小的机会损失值$Z_{l}^{*}=\\min _{i}\\left\\{Z_{i}\\right\\}$ 等可能型决策：不同状态等可能，计算平均收益 乐观系数法：给出乐观系数$\\alpha \\in[0,1]$ 风险型决策对发生各事件的概率已知，一般采用期望值作为决策准则。 贝叶斯决策准则及信息价值（EVPI）已知先验概率，可以通过增加花费（信息费用）修正概率，修正概率通过贝叶斯公式得到。","link":"/2019/08/09/决策论/"},{"title":"右键添加管理员取得所有权","text":"12345678910111213141516171819Windows Registry Editor Version 5.00　　 [HKEY_CLASSES_ROOT\\*\\shell\\runas] @=&quot;管理员取得所有权&quot; &quot;NoWorkingDirectory&quot;=&quot;&quot;　　 [HKEY_CLASSES_ROOT\\*\\shell\\runas\\command] @=&quot;cmd.exe /c takeown /f \\&quot;%1\\&quot; &amp;&amp; icacls \\&quot;%1\\&quot; /grant administrators:F&quot; &quot;IsolatedCommand&quot;=&quot;cmd.exe /c takeown /f \\&quot;%1\\&quot; &amp;&amp; icacls \\&quot;%1\\&quot; /grant administrators:F&quot;　　 [HKEY_CLASSES_ROOT\\exefile\\shell\\runas2] @=&quot;管理员取得所有权&quot; &quot;NoWorkingDirectory&quot;=&quot;&quot;　　 [HKEY_CLASSES_ROOT\\exefile\\shell\\runas2\\command] @=&quot;cmd.exe /c takeown /f \\&quot;%1\\&quot; &amp;&amp; icacls \\&quot;%1\\&quot; /grant administrators:F&quot; &quot;IsolatedCommand&quot;=&quot;cmd.exe /c takeown /f \\&quot;%1\\&quot; &amp;&amp; icacls \\&quot;%1\\&quot; /grant administrators:F&quot;　　 [HKEY_CLASSES_ROOT\\Directory\\shell\\runas] @=&quot;管理员取得所有权&quot; &quot;NoWorkingDirectory&quot;=&quot;&quot;　　 [HKEY_CLASSES_ROOT\\Directory\\shell\\runas\\command] @=&quot;cmd.exe /c takeown /f \\&quot;%1\\&quot; /r /d y &amp;&amp; icacls \\&quot;%1\\&quot; /grant administrators:F /t&quot; &quot;IsolatedCommand&quot;=&quot;cmd.exe /c takeown /f \\&quot;%1\\&quot; /r /d y &amp;&amp; icacls \\&quot;%1\\&quot; /grant administrators:F /t&quot; 在txt文件中写入，使用ANSI编码，重命名为.reg文件，双击","link":"/2019/07/29/右键添加管理员取得所有权/"},{"title":"排队论","text":"记录了排队论中的一些基本概念。 基本内容 了解排队系统的基本概念 了解生灭过程和状态转移图的推演，状态概率公式的推演 掌握排队系统的主要数量指标和记号 熟练掌握排队模型和求解方法（单服务台排队模型） 排队系统的基本构成 输入过程的三特征 输入过程：顾客源无限有限，顾客到达人数成批到达还是单个到达，到达时间间隔分为确定型和随机型（需知概率分布）。服务过程对顾客到达的影响相互独立到达、非相互独立到达（回头客问题）。 排队规则：损失制、等待制、混合制，队列长，队列数 服务机构：服务方式：单顾客、多顾客，服务时间：确定型和随机型 排队模型的表示方式肯德尔（Kendall）记号: $$输入分布/输出分布/并联的服务站数（X/Y/Z）$$ 扩展表示： $$输入分布/输出分布/并联的服务站数/系统容量（队长）$$ $$/系统状态（顾客源数）/服务规则（X/Y/Z/A/B/C）$$ 分布 泊松分布（最简单流）特点： 平稳性：在一定时间间隔内，来到服务系统的k个顾客的概率仅与这段时间的间隔长短有关，而与这段时间的起始时刻无关 无后效性：在不相交的时间区间内到达的顾客数是相互独立的 稀有性：在足够先得时间区间内只能有一个顾客到达，不可能有两个以上得顾客同时到达。 $$P_{k}(t)=e^{-\\lambda t} \\frac{(\\lambda t)^{k}}{k !} \\quad(k=0,1,2, \\cdots)$$ 在t时间内，有k个顾客来到服务系统得概率。 负指数分布： 排队问题中的常用指标 队长和排队长 逗留时间和等待时间 服务机构的工作强度=用于服务顾客的时间/服务设施的总服务时间 忙期：服务机构连续繁忙的时间长度 生灭过程是用来处理输入为最简单流，服务时间为指数分布这类最简单排队模型得方法。 平衡方程对任意状态，单位时间内进入该状态的平均次数和离开该状态的平均次数应该想到能（输入=输出）。 little公式 参考b站：运筹学 黄丽娟","link":"/2019/08/09/排队论/"},{"title":"网络计划","text":"基本要点 双代号网络图绘制 网络计划图时间参数计算 寻找最短工期和关键路线的方法 网络优化中的时间-费用优化方法，即最低成本 双代号网络计划图 节点：一个事项，指一个或若干个工序的开始和结束，相邻节点之间只能有一条箭头连接，但是可以用虚箭头连 箭头：表示工作，上面是工作名，下面是工作时间，不能形成缺口和回路，终点和起始点都有只有一个 圆圈里的数字是节点编号，编号从左到右，尾小于头 先行工序和后继工序先行工序表示紧排在本工序之前的工序，且开始或者完成后才能开始本工序 后继工序表示紧排在本工序之后的工序，且本工序开始或完成后，才能做的工序。 虚工序不占用时间和不消耗人力资金的资源，只为了表示相邻工序之间的逻辑关系而虚设的工序。 时间参数计算 完成项目所需要的最少时间 每个工序的开始和结束时间 关键路线及其相应的关键工序 非关键工序在不影响工程完成的前提下，其开始与结束时间可以推迟多久。 关键路线完成各个工序所需要时间最长的路线（主要矛盾线），该路线上的工序是关键工序。 就是说在这条路线上，所有的工序是需要时间最多的，这些工序没有结束之前，其他工序是不可能做完的。 求解方法：工序计算法 网络计划优化 工期优化 时间-费用优化 资源优化 资料网络计划的多目标优化 http://tow.cnki.net/kcms/detail/detail.aspx?filename=2001011640.nh&amp;dbcode=CRJT_CMFD&amp;dbname=CMFDTOTAL&amp;v=","link":"/2019/08/01/网络计划/"},{"title":"运输问题","text":"典型背景：单一物资的运输调度问题 $$\\min z=\\sum_{i=1}^{m} \\sum_{j=1}^{n} c_{i j} x_{i j}$$ 所有运价的求和最小（一定有最优解） $\\left\\{\\begin{array}{c}{\\sum_{j=1}^{n} x_{i}=a_{i}, i=1,2, \\cdots, m} \\\\ {\\sum_{i=1}^{m} x_{n}=b_{j}, j=1,2, \\cdots, n} \\\\ {x_{i j} \\geq 0, i=1,2, \\cdots, m} \\\\ {j=1,2, \\cdots n}\\end{array}\\right.$ 约束： 产地i运到n个销地的运量总和等于产地i的产量 m个产地运到销地j的运量的总和等于销地j的销量","link":"/2019/08/09/运输问题/"}],"tags":[{"name":"机器学习","slug":"机器学习","link":"/tags/机器学习/"},{"name":"矩阵分析","slug":"矩阵分析","link":"/tags/矩阵分析/"},{"name":"数学建模","slug":"数学建模","link":"/tags/数学建模/"},{"name":"matlab","slug":"matlab","link":"/tags/matlab/"},{"name":"markdown","slug":"markdown","link":"/tags/markdown/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"运筹学","slug":"运筹学","link":"/tags/运筹学/"},{"name":"windows","slug":"windows","link":"/tags/windows/"}],"categories":[{"name":"机器学习","slug":"机器学习","link":"/categories/机器学习/"},{"name":"算法","slug":"算法","link":"/categories/算法/"},{"name":"运筹学","slug":"运筹学","link":"/categories/运筹学/"}]}